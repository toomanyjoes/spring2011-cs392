import Jakarta.util.*;
import java.io.*;
import java.util.*;
import com.google.gson.*;

// Taken from Tool.jak:
// This class provides a programming-interface to guidsl,
// and avoids the display of the GUI itself.  It is to be used
// for invoking the functionality of a guidsl tool.

// basic approach:
// Tool tool = new Tool( "modelFileName" );
// boolean result = true/false -- result of the SAT test
// SATtest t = new SATtest( "name of test" , result );
// t.add( "featureName or -FeatureName); // loop over this
// boolean output = true (for debugging)
// if (tool.modelDebug(t, output)) ... else ...;

/**
* This class provides a programming interface to GuiDsl. It provides
* methods useful for use in web applications. e.g. modelExplanation
* returns a serialized JSON object.
* 
* @author Samuel Palmer
*/
public class WebTool {
    cnfModel model;

    public WebTool( String modelFileName ) {

        // Step 1: open the guidsl model file 

        FileInputStream  inputFile = null;
        try {
            inputFile = new FileInputStream( modelFileName );
        }
        catch ( Exception e ) {
            Util.fatalError( "File " + modelFileName + " not found:"
               + e.getMessage() );
        }

        // Step 2: create a parser and parse input files
        //         inputRoot is root of parse tree of input file

        Parser myParser = Parser.getInstance( inputFile );
        Model    inputRoot = null;
        try {
            inputRoot = ( Model ) myParser.parseAll() ;
        }
        catch ( Exception e ) {
            Util.fatalError( "Parsing Exception Thrown in "
                             + modelFileName + ": " + e.getMessage() );
        }

        // Step 3: transform parse tree here into the internal format

        try {
            Main.process( inputRoot );
        }
        catch( SemanticException e ) {
            int errorCnt = Util.errorCount();
            Util.fatalError( errorCnt + " error(s) found" );
        }

        // Step 4: initialize any additional state variables

        model = cnfModel.init();

    } // end constructor

    /**
     *  Runs SAT solver with features in selectedFeatures included.
     *  @param selectedFeatures List of Strings containing all selected features
     *  @return serialized 2D JSON associative array. First dimension is variable name. Second dimension is 'set', 'chg', or 'exp' which indicate if the 
     *  is set, if the variable can be changed by the user, and an explination why the variable is set or not set, respectively.    
     */
    public String modelExplanation( List selectedFeatures ) {
        for( Iterator it = selectedFeatures.iterator(); it.hasNext(); ) {
            String n = ( String )it.next();
            grammar.UserSelections.add( variable.find( n ) );
        }
        SATSolver s = new SATSolver();
        Map reasonMap = new HashMap();
        try {
            grammar.propagate();
            s.solve( solverTest.input2SATSolver );
            int[] sModel = s.solver.model();

            for( Iterator it = variable.Vtable.values().iterator(); it.hasNext(); ) {
                variable var = ( variable )it.next();
                String explanation = var.explainValue();
                if( !explanation.isEmpty() ) {
                    boolean isSet = (var.value == variable.T);
                    boolean isChangable = selectedFeatures.contains( var.name );
                    reasonMap.put( var.name, new VariableDescription( isSet, isChangable, explanation ) );
                }
            }
        }
        catch( Exception e ) {
            e.printStackTrace();
        }
        
        Gson gson = new Gson();
        String result = gson.toJson( reasonMap );
        return result;
    }
}
