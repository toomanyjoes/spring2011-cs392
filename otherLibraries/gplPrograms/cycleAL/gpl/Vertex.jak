layer gpl;

import java.util.Iterator;
import java.util.LinkedList;

import java.lang.Integer;

SoUrCe RooT Undirected "../../../jak/UndirectedAL/Vertex.jak";

// ************************************************************

abstract class Vertex$$Undirected implements EdgeIfc, NeighborIfc {
    public LinkedList adjacentVertices;
    public String name;

    public Vertex$$Undirected()
    {
        VertexConstructor();
    }

    public void VertexConstructor()
    {
        name      = null;
        adjacentVertices = new LinkedList();
    }

    public  Vertex assignName( String name )
    {
        this.name = name;
        return ( Vertex ) this;
    }

    public VertexIter getNeighbors()
    {
        return new VertexIter() {
            private Iterator iter = adjacentVertices.iterator();
            public Vertex next()
            {
                return ( Vertex )iter.next();
            }

            public boolean hasNext()
            {
                return iter.hasNext();
            }
        };
    }

    public void display() {
        int s = adjacentVertices.size();
        int i;

        System.out.print( "Vertex " + name + " connected to: " );
        for ( i=0; i<s; i++ )
            System.out.print( ( ( Vertex ) adjacentVertices.get( i ) ).name
                                                + ", " );
        System.out.println();
    }
    //--------------------
    // differences
    //--------------------

    public void addAdjacent( Vertex n ) {
        adjacentVertices.add( n );
    }

    public void adjustAdorns( Vertex the_vertex, int index )
      {}
    public LinkedList getNeighborsObj()
    {
        return adjacentVertices;
    }

    public EdgeIter getEdges()
    {
        return new EdgeIter() {
            private Iterator iter = adjacentVertices.iterator();
            public EdgeIfc next()
            {
                return ( EdgeIfc ) iter.next();

            //              return ( ( EdgeIfc ) ( ( Neighbor )iter.next( ) ).edge );
            }
            public boolean hasNext()
            {
                return iter.hasNext();
            }
        };
    }

    public String getName()
    {
        return this.name;
    }

    //--------------------
    // from EdgeIfc
    //--------------------

    public Vertex getStart() {
        return this;
    }
    public Vertex getEnd() {
        return null;
    }

    public void setWeight( int weight ) {}
    public int getWeight() {
        return 0;
    }

    public Vertex getOtherVertex( Vertex vertex )
    {
        return this;
    }

    public void adjustAdorns( EdgeIfc the_edge )
    {}

}

SoUrCe  DFS "../../../jak/DFS/Vertex.jak";

// *************************************************************************

abstract class Vertex$$DFS extends  Vertex$$Undirected  {
    public boolean visited;

    public void VertexConstructor() 
    {
        Super().VertexConstructor();
        visited = false;
    }

    public void init_vertex( WorkSpace w ) 
    {
        visited = false;
        w.init_vertex( ( Vertex ) this );
    }

    public void nodeSearch( WorkSpace w ) 
    {
        Vertex v;

        // Step 1: Do preVisitAction.
        //            If we've already visited this node return
        w.preVisitAction( ( Vertex ) this );

        if ( visited )
            return;

        // Step 2: else remember that we've visited and
        //         visit all neighbors
        visited = true;

        for ( VertexIter  vxiter = getNeighbors(); vxiter.hasNext(); ) 
        {
            v = vxiter.next();
            w.checkNeighborAction( ( Vertex ) this, v );
            v.nodeSearch( w );
        }

        // Step 3: do postVisitAction now
        w.postVisitAction( ( Vertex ) this );
    } // of dftNodeSearch

    public void display() {
        if ( visited )
            System.out.print( "  visited" );
        else
            System.out.println( " !visited" );
        Super().display();
    }
}

SoUrCe  Cycle "../../../jak/Cycle/Vertex.jak";

// *************************************************************************
   
public class Vertex extends  Vertex$$DFS  {
    public int VertexCycle;
    public int VertexColor; // white ->0, gray ->1, black->2
      
    public void display() {
        System.out.print( " VertexCycle# " + VertexCycle + " " );
        Super().display();
    }
}