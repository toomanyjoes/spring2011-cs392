layer gpl;

import java.util.LinkedList;
import java.util.Iterator;
import java.util.Collections;
import java.util.Comparator;

SoUrCe RooT Directed "../../../jak/DirectedEL/Vertex.jak";

// of graph

  // ***********************************************************************

abstract class Vertex$$Directed {

    // dja: changed neighbors and name to public
    public LinkedList neighbors;

    public String name;

    public String getName() {
        return name;
    }

    public Vertex$$Directed() {
        VertexConstructor();
    }

    public void VertexConstructor() {
        name      = null;
        neighbors = new LinkedList();
    }

    public  Vertex assignName( String name ) {
        this.name = name;
        return ( Vertex ) this;
    }

    public void addNeighbor( Neighbor n ) {
        neighbors.add( n );
    }

    public VertexIter getNeighbors() {
        return new VertexIter() {
            private Iterator iter = neighbors.iterator();
            public Vertex next() {
                return ( ( Neighbor )iter.next() ).end;
            }
            public boolean hasNext() {
                return iter.hasNext();
            }
        };
    }

    public EdgeIter getEdges()
    {
        return new EdgeIter() {
            private Iterator iter = neighbors.iterator();
                            /* dja: changed to fix compile error */
            //                public EdgeIfc next() { return ((EdgeIfc)  iter.next()).edge; }
            public EdgeIfc next() 
                {
                return ( ( EdgeIfc ) ( ( Neighbor ) iter.next() ).edge );
            }
            public boolean hasNext() {
                return iter.hasNext();
            }
        };
    }

    public void display() {
        System.out.print( " Node " + getName() + " connected to: " );

        for( VertexIter vxiter = getNeighbors(); vxiter.hasNext(); )
         {
            Vertex v = vxiter.next();
            System.out.print( v.getName() + ", " );
        }

        System.out.println();
    }
}

SoUrCe  DFS "../../../jak/DFS/Vertex.jak";

// *************************************************************************

abstract class Vertex$$DFS extends  Vertex$$Directed  {
    public boolean visited;

    public void VertexConstructor() 
    {
        Super().VertexConstructor();
        visited = false;
    }

    public void init_vertex( WorkSpace w ) 
    {
        visited = false;
        w.init_vertex( ( Vertex ) this );
    }

    public void nodeSearch( WorkSpace w ) 
    {
        Vertex v;

        // Step 1: Do preVisitAction.
        //            If we've already visited this node return
        w.preVisitAction( ( Vertex ) this );

        if ( visited )
            return;

        // Step 2: else remember that we've visited and
        //         visit all neighbors
        visited = true;

        for ( VertexIter  vxiter = getNeighbors(); vxiter.hasNext(); ) 
        {
            v = vxiter.next();
            w.checkNeighborAction( ( Vertex ) this, v );
            v.nodeSearch( w );
        }

        // Step 3: do postVisitAction now
        w.postVisitAction( ( Vertex ) this );
    } // of dftNodeSearch

    public void display() {
        if ( visited )
            System.out.print( "  visited" );
        else
            System.out.println( " !visited" );
        Super().display();
    }
}

SoUrCe  StronglyConnected "../../../jak/StronglyConnected/Vertex.jak";

// of Graph

  // ***********************************************************************
   
public class Vertex extends  Vertex$$DFS  {
    public int finishTime;
    public int strongComponentNumber;
      
    public void display() {
        System.out.print( " FinishTime -> " + finishTime + " SCCNo -> " 
                        + strongComponentNumber );
        Super().display();
    }
}